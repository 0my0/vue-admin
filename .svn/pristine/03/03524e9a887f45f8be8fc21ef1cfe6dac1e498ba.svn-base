{"remainingRequest":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vueProject\\admin\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\vueProject\\admin\\vue-element-admin\\src\\store\\modules\\user.js","dependencies":[{"path":"E:\\vueProject\\admin\\vue-element-admin\\src\\store\\modules\\user.js","mtime":1573798376418},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import { login as _login, logout, getInfo as _getInfo } from '@/api/user';\nimport { getToken, setToken, removeToken } from '@/utils/auth';\nimport router, { resetRouter } from '@/router';\nimport toJsonData from '@/api/jsondata';\nvar state = {\n  token: getToken(),\n  name: '',\n  avatar: '',\n  introduction: '',\n  roles: []\n};\nvar mutations = {\n  SET_TOKEN: function SET_TOKEN(state, token) {\n    state.token = token;\n  },\n  SET_INTRODUCTION: function SET_INTRODUCTION(state, introduction) {\n    state.introduction = introduction;\n  },\n  SET_NAME: function SET_NAME(state, name) {\n    state.name = name;\n  },\n  SET_AVATAR: function SET_AVATAR(state, avatar) {\n    state.avatar = avatar;\n  },\n  SET_ROLES: function SET_ROLES(state, roles) {\n    state.roles = roles;\n  },\n  SET_PRIV: function SET_PRIV(state, priv) {\n    state.priv = priv;\n  }\n};\nvar actions = {\n  // user login\n  login: function login(_ref, userInfo) {\n    var commit = _ref.commit;\n    var postData = toJsonData.JsonData(userInfo); // const { username, password } = postData\n\n    return new Promise(function (resolve, reject) {\n      _login(postData).then(function (response) {\n        commit('SET_TOKEN', response.token);\n        setToken(response.token);\n        resolve();\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // get user info\n  getInfo: function getInfo(_ref2) {\n    var commit = _ref2.commit,\n        state = _ref2.state;\n    return new Promise(function (resolve, reject) {\n      _getInfo(state.token).then(function (response) {\n        var data = response;\n\n        if (!data) {\n          reject('Verification failed, please Login again.');\n        } //\n        // const { roles, admin_name } = data\n\n\n        var roles = data.roles;\n        var admin_name = data.admin_name;\n        var priv = data.priv; //\n        // // roles must be a non-empty array\n        // if (!priv || priv.length <= 0) {\n        //   reject('getInfo: roles must be a non-null array!')\n        // }\n\n        commit('SET_PRIV', priv);\n        commit('SET_ROLES', roles);\n        commit('SET_NAME', admin_name); // commit('SET_AVATAR', avatar)\n        // commit('SET_INTRODUCTION', introduction)\n\n        resolve(response);\n      }).catch(function (error) {\n        console.log(error);\n        reject(error);\n      });\n    });\n  },\n  // user logout\n  logout: function logout(_ref3) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n    return new Promise(function (resolve, reject) {\n      commit('SET_TOKEN', '');\n      commit('SET_ROLES', []);\n      removeToken();\n      resetRouter();\n      resolve();\n    });\n  },\n  // remove token\n  resetToken: function resetToken(_ref4) {\n    var commit = _ref4.commit;\n    return new Promise(function (resolve) {\n      commit('SET_TOKEN', '');\n      commit('SET_ROLES', []);\n      removeToken();\n      resolve();\n    });\n  }\n};\nexport default {\n  namespaced: true,\n  state: state,\n  mutations: mutations,\n  actions: actions\n};",null]}
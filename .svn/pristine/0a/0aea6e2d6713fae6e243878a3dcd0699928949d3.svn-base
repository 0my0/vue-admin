{"remainingRequest":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vueProject\\admin\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js!E:\\vueProject\\admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vueProject\\admin\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vueProject\\admin\\vue-element-admin\\src\\views\\system-manager\\department.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vueProject\\admin\\vue-element-admin\\src\\views\\system-manager\\department.vue","mtime":1574217620160},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _objectSpread from \"E:\\\\vueProject\\\\admin\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread2\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"E:\\\\vueProject\\\\admin\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:\\\\vueProject\\\\admin\\\\vue-element-admin\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport SystemManager from '@/api/system-manager';\nimport { getToken } from '@/utils/auth';\nimport toJsonData from '@/api/jsonformdata';\nimport { constantRoutes, asyncRoutes } from '@/router';\nimport { deepClone } from '@/utils/index.js';\nimport path from 'path';\nimport { getRoles as _getRoles, updateRole } from '@/api/role';\nvar defaultRole = {\n  routes: {}\n};\nexport default {\n  name: 'department',\n  data: function data() {\n    return {\n      formInline: {\n        admin_name: '',\n        name: ''\n      },\n      activeIndex: '1',\n      token: getToken(),\n      adminId: '',\n      departmentName: [],\n      dialogFormVisible: false,\n      dialogAddFormVisible: false,\n      dialogPersonFormVisible: false,\n      dialogPermissionVisible: false,\n      checkStrictly: false,\n      formLabelWidth: '120px',\n      visible: false,\n      optionVisible: false,\n      adminVisible: false,\n      tableData: [{}],\n      top: 0,\n      left: 0,\n      selectedTag: {},\n      affixTags: [],\n      routes: [],\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      },\n      form: {\n        role_id: '',\n        admin_name: '',\n        password: '',\n        name: ''\n      },\n      personForm: {\n        role_id: '',\n        admin_name: '',\n        password: '',\n        name: ''\n      },\n      addForm: {\n        role_name: ''\n      },\n      roleForm: Object.assign({}, defaultRole),\n      departmentId: ''\n    };\n  },\n  methods: {\n    onSubmit: function onSubmit() {\n      var _this = this;\n\n      var postData = toJsonData.JsonData(this.formInline);\n      SystemManager.searchPeople(postData, this.token).then(function (data) {\n        _this.tableData = data.data;\n      });\n    },\n    getRoutes: function () {\n      var _getRoutes = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var routes;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                routes = deepClone([].concat(_toConsumableArray(constantRoutes), _toConsumableArray(asyncRoutes)));\n                this.serviceRoutes = routes;\n                this.routes = this.generateRoutes(routes);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getRoutes() {\n        return _getRoutes.apply(this, arguments);\n      }\n\n      return getRoutes;\n    }(),\n    getRoles: function () {\n      var _getRoles2 = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.dialogPermissionVisible = true;\n\n                _getRoles(this.departmentId, this.token).then(function (data) {\n                  var dataChecked = data.data;\n\n                  _this2.$refs.tree.setCheckedKeys(dataChecked);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRoles() {\n        return _getRoles2.apply(this, arguments);\n      }\n\n      return getRoles;\n    }(),\n    generateRoutes: function generateRoutes(routes) {\n      var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';\n      var res = [];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = routes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var route = _step.value;\n\n          // skip some route\n          if (route.hidden) {\n            continue;\n          }\n\n          var onlyOneShowingChild = this.onlyOneShowingChild(route.children, route);\n\n          if (route.children && onlyOneShowingChild && !route.alwaysShow) {\n            route = onlyOneShowingChild;\n          }\n\n          var data = {\n            path: path.resolve(basePath, route.path),\n            title: route.meta && route.meta.title // recursive child routes\n\n          };\n\n          if (route.children) {\n            data.children = this.generateRoutes(route.children, data.path);\n          }\n\n          res.push(data);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return res;\n    },\n    onlyOneShowingChild: function onlyOneShowingChild() {\n      var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var parent = arguments.length > 1 ? arguments[1] : undefined;\n      var onlyOneChild = null;\n      var showingChildren = children.filter(function (item) {\n        return !item.hidden;\n      }); // When there is only one child route, the child route is displayed by default\n\n      if (showingChildren.length === 1) {\n        onlyOneChild = showingChildren[0];\n        onlyOneChild.path = path.resolve(parent.path, onlyOneChild.path);\n        return onlyOneChild;\n      } // Show parent if there are no child route to display\n\n\n      if (showingChildren.length === 0) {\n        onlyOneChild = _objectSpread({}, parent, {\n          path: '',\n          noShowingChildren: true\n        });\n        return onlyOneChild;\n      }\n\n      return false;\n    },\n    confirmRole: function confirmRole() {\n      var _this3 = this;\n\n      var checkedKeys = this.$refs.tree.getCheckedKeys();\n      var formData = new FormData();\n      formData.append('data[priv]', checkedKeys.join());\n      updateRole(formData, this.departmentId, this.token).then(function (data) {\n        _this3.$message({\n          message: data.data.log,\n          type: 'success'\n        });\n\n        _this3.closeDialog(); // this.getRoleIndex();\n\n      });\n    },\n    generateTree: function generateTree(routes) {\n      var basePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '/';\n      var checkedKeys = arguments.length > 2 ? arguments[2] : undefined;\n      var res = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = routes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var route = _step2.value;\n          var routePath = path.resolve(basePath, route.path); // recursive child routes\n\n          if (route.children) {\n            route.children = this.generateTree(route.children, routePath, checkedKeys);\n          }\n\n          if (checkedKeys.includes(routePath) || route.children && route.children.length >= 1) {\n            res.push(route);\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return res;\n    },\n    handleSelect: function handleSelect(key, keyPath) {\n      var _this4 = this;\n\n      if (key > 1) {\n        this.departmentId = this.departmentName[key - 2].role_id;\n      } else {\n        this.departmentId = '';\n      } // this.departmentId\n\n\n      SystemManager.getAdminIndex(this.departmentId, this.token).then(function (data) {\n        _this4.tableData = data.data;\n        console.log(_this4.tableData);\n      });\n    },\n    getRoleIndex: function getRoleIndex() {\n      var _this5 = this;\n\n      this.departmentName = [];\n      SystemManager.getRoleIndex(this.token).then(function (data) {\n        var arrData = Object.entries(data.data);\n        arrData.forEach(function (res) {\n          _this5.departmentName.push({\n            'role_id': res[1].role_id,\n            'role_name': res[1].role_name\n          });\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    createRole: function createRole() {\n      var _this6 = this;\n\n      var postData = toJsonData.JsonData(this.addForm);\n      SystemManager.createRole(postData, this.token).then(function (data) {\n        _this6.$message({\n          message: data.data.log,\n          type: 'success'\n        });\n\n        _this6.closeDialog();\n\n        _this6.getRoleIndex();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    createPerson: function createPerson() {\n      var _this7 = this;\n\n      var postData = toJsonData.JsonData(this.form);\n      SystemManager.createPerson(postData, this.token).then(function (data) {\n        _this7.$message({\n          message: data.data.log,\n          type: 'success'\n        });\n\n        _this7.handleSelect();\n\n        _this7.closeDialog();\n      }).catch(function (error) {\n        console.log(error);\n      });\n      this.form = {};\n    },\n    modifyPerson: function modifyPerson() {\n      var _this8 = this;\n\n      var postData = toJsonData.JsonData(this.personForm);\n      SystemManager.modifyPerson(postData, this.token, this.adminId).then(function (data) {\n        _this8.$message({\n          message: data.data.log,\n          type: 'success'\n        });\n\n        _this8.handleSelect(parseInt(_this8.departmentId) + 1);\n\n        _this8.closeDialog();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    deleteDepartment: function deleteDepartment() {\n      var _this9 = this;\n\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        SystemManager.deleteRole(_this9.departmentId, _this9.token).then(function (data) {\n          _this9.getRoleIndex();\n        }); // this.$message({\n        //   type: 'success',\n        //   message: '删除成功!'\n        // });\n      }).catch(function () {\n        _this9.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    deletePerson: function deletePerson() {\n      var _this10 = this;\n\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        SystemManager.deletePerson(_this10.adminId, _this10.token).then(function (data) {\n          _this10.$message({\n            message: data.data.log,\n            type: 'success'\n          });\n\n          _this10.handleSelect(parseInt(_this10.departmentId) + 1);\n\n          _this10.closeDialog();\n        });\n      }).catch(function () {\n        _this10.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    openAddMenu: function openAddMenu(tag, e) {\n      this.activeIndex = tag.toString(); // this.departmentId = departmentId\n\n      this.handleSelect(parseInt(this.activeIndex));\n      this.publicMenu(e);\n      this.visible = true;\n      this.optionVisible = false; // this.selectedTag = tag\n    },\n    openOptionMenu: function openOptionMenu(tag, departmentId, e) {\n      this.activeIndex = tag.toString();\n      this.departmentId = departmentId; // console.log(departmentId)\n\n      this.publicMenu(e);\n      this.handleSelect(parseInt(this.departmentId) + 1);\n      this.optionVisible = true;\n      this.visible = false;\n    },\n    publicMenu: function publicMenu(e) {\n      var menuMinWidth = 105;\n      var offsetLeft = this.$el.getBoundingClientRect().left; // container margin left\n\n      var offsetWidth = this.$el.offsetWidth; // container width\n\n      var maxLeft = offsetWidth - menuMinWidth; // left boundary\n\n      var left = e.clientX - offsetLeft + 15; // 15: margin right\n\n      if (left > maxLeft) {\n        this.left = maxLeft;\n      } else {\n        this.left = left;\n      }\n\n      this.top = e.clientY - 80;\n    },\n    rightClick: function rightClick(row, column, e) {\n      e.preventDefault();\n      this.personForm = {\n        role_id: row.role_id,\n        admin_name: row.admin_name,\n        password: '',\n        name: row.name\n      };\n      this.adminId = row.admin_id;\n      this.publicMenu(e);\n      this.adminVisible = true;\n    },\n    closeMenu: function closeMenu() {\n      this.visible = false;\n      this.optionVisible = false;\n      this.adminVisible = false;\n    },\n    closeDialog: function closeDialog() {\n      this.dialogAddFormVisible = false;\n      this.dialogFormVisible = false;\n      this.dialogPersonFormVisible = false;\n      this.dialogPermissionVisible = false;\n    }\n  },\n  computed: {\n    routesData: function routesData() {\n      return this.routes;\n    }\n  },\n  created: function created() {\n    this.getRoleIndex();\n    this.handleSelect();\n    this.getRoutes();\n  },\n  watch: {\n    visible: function visible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu);\n      } else {\n        document.body.removeEventListener('click', this.closeMenu);\n      }\n    },\n    optionVisible: function optionVisible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu);\n      } else {\n        document.body.removeEventListener('click', this.closeMenu);\n      }\n    },\n    adminVisible: function adminVisible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu);\n      } else {\n        document.body.removeEventListener('click', this.closeMenu);\n      }\n    }\n  }\n};",null]}
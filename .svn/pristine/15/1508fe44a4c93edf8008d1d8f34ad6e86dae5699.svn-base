{"remainingRequest":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vueProject\\admin\\vue-element-admin\\src\\layout\\components\\AppMain.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vueProject\\admin\\vue-element-admin\\src\\layout\\components\\AppMain.vue","mtime":1578298278857},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n  import { getToken } from '@/utils/auth';\n  import Sales from '@/api/sales';\n  import toJsonData from '@/api/jsonformdata'\n  import goldOrderManager from '@/views/sales/first-hand/gold-order-manager/index.vue'\nexport default {\n  name: 'AppMain',\n  components:{ goldOrderManager },\n  data(){\n    return{\n      token: getToken(),\n      websock:null\n    }\n  },\n  computed: {\n    cachedViews() {\n      return this.$store.state.tagsView.cachedViews\n    },\n    key() {\n     console.log(this.$route.path === '/sales/first-hand/gold-order-manager')\n      return this.$route.path\n    }\n  },\n  methods: {\n    initWebSocket() {\n      const wsuri = \"ws://47.91.87.125:2346?token=123\";\n      this.websock = new WebSocket(wsuri);\n      this.websock.onmessage = this.websocketonmessage;\n      this.websock.onopen = this.websocketonopen;\n      this.websock.onerror = this.websocketonerror;\n      this.websock.onclose = this.websocketclose;\n    },\n    showMsgNotification(title, msg) {\n      var Notification = window.Notification || window.mozNotification || window.webkitNotification;\n      if (Notification) {\n        if (Notification.permission == \"granted\") {  //已经允许通知\n          var instance = new Notification(title, {\n            body: msg,\n            icon: \"/static/images/ico.jpg\",\n          });\n          instance.onclick = function () {\n            //$('body').css({'background': 'red'});\n            //console.log('onclick');\n            instance.close();\n          };\n          instance.onerror = function () {\n            //console.log('onerror');\n          };\n          instance.onshow = function () {\n            // 窗口显示 播放音频\n            //var audio = new Audio(\"./10418.wav\");\n            //audio.play();\n            // 窗口显示3S后关闭\n            setTimeout(function(){\n              notify.close();\n            },3000);\n          };\n          instance.onclose = function () {\n            //console.log('onclose');\n          };\n        } else {\n          //第一次询问或已经禁止通知(如果用户之前已经禁止显示通知，那么浏览器不会再次询问用户的意见，Notification.requestPermission()方法无效)\n          Notification.requestPermission(function (status) {\n            //用户允许\n            if (status === \"granted\") {\n              var instance = new Notification(title, {\n                body: msg,\n                icon: \"images/reload.png\"\n              });\n\n              instance.onclick = function () {\n                // Something to do\n              };\n              instance.onerror = function () {\n                // Something to do\n              };\n              instance.onshow = function () {\n                // Something to do\n              };\n              instance.onclose = function () {\n                // Something to do\n              };\n              //用户禁止\n            } else {\n              return false\n            }\n          });\n        }\n      } else {\n        //不支持(IE等)\n        var index = 0;\n        clearInterval(timer);\n        timer = setInterval(function () {\n          if (index % 2) {\n            $('title').text('【　　　】' + title);//这里是中文全角空格，其他不行\n          } else {\n            $('title').text('【新消息】' + title);\n          }\n          index++;\n\n          if (index > 20) {\n            clearInterval(timer);\n          }\n        }, 500);\n      }\n    },\n    websocketonmessage(e) {\n      //SOCKET收到信息\n      const redata = JSON.parse(e.data);\n      //this.showMsgNotification('新订单', redata.msg)\n      switch (redata.type) {\n        case 'ping':\n          //console.log('ping')\n          break;\n        case 'ORDER':\n          console.log('add order ', redata.orderInfo)\n          const orderDetail = toJsonData.JsonData(redata.orderInfo);\n          Sales.postOrderData(orderDetail,this.token).then(data => {\n            // this.showMsgNotification('新订单', redata.orderInfo.order_no)\n          })\n          break;\n          case 'ORDER_EDIT':\n          console.log('order_edit')\n            const postData = toJsonData.JsonData(this.$refs.goldOrderManager.formInline);\n            Sales.searchLimitOrder(postData,this.$refs.goldOrderManager.pageSize,this.$refs.goldOrderManager.currentPage,this.token).then(data => {\n              this.$refs.goldOrderManager.tableData = data.data;\n              this.$refs.goldOrderManager.totalCount = parseInt(data.count)\n              this.$refs.goldOrderManager.orderAmount = data.amount + '(USD)';\n              this.$refs.goldOrderManager.usdAmount = data.USD + 'USD';\n              this.$refs.goldOrderManager.cadAmount = data.CAD +'CAD';\n              this.$refs.goldOrderManager.audAmount = data.AUD + 'AUD';\n              this.$refs.goldOrderManager.eurAmount = data.EUR = 'EUR';\n              this.$refs.goldOrderManager.youhuiAmount = data.youhui + 'USD'\n            })\n            break;\n        case 'ORDER_PAY':\n          Sales.editOrderData(redata.orderInfo.order_no,this.token).then(data => {\n            this.showMsgNotification('新订单', redata.orderInfo.order_no)\n          })\n          break;\n      }\n    },\n    websocketonopen() {\n      console.log('发送数据')\n      let actions = {\"type\":\"ping\"};\n      setInterval(this.ping,3000);\n    },\n    websocketonerror() {\n      this.initWebSocket();\n    },\n    websocketsend(Data){\n      this.websock.send(Data);\n    },\n    websocketclose(e){\n      console.log('断开连接',e)\n    },\n    ping(){\n      console.log('send ping')\n      this.websock.send('{\"type\":\"ping\"}');\n    }\n  },\n  created() {\n    this.initWebSocket();\n\n  }\n}\n",null]}
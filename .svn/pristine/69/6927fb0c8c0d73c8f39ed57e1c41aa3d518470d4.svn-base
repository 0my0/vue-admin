import { asyncRoutes, constantRoutes } from '@/router'

/**
 * Use meta.role to determine if the current user has permission
 * @param roles
 * @param route
 */
function hasPermission(roles, route) {
 // console.log(roles)
  roles.forEach(res => {
    // console.log(res)
  })
  if (route.meta && route.meta.permission_name) {
   // console.log(roles.some(role => {route.meta.permission_name.includes(role)}))
    return roles.some(role => {
   const roleArr = role.split("/")
     // console.log(route.meta.permission_name , roleArr[roleArr.length-1] , route.meta.permission_name.includes(roleArr[roleArr.length-1]))
     return  route.meta.permission_name.includes(roleArr[roleArr.length-1])
    })
  } else {
    return false
  }
}

/**
 * Filter asynchronous routing tables by recursion
 * @param routes asyncRoutes
 * @param roles
 */

function filterAsyncRoutes(routes, roles) {
  const res = []
  routes.forEach(route => {
    const tmp = { ...route }
    if (hasPermission(roles, tmp)) {
      // 是否存在子节点，存在子节点说明当前节点为展开栏，并非页面
      if (tmp.children) {
        tmp.children = filterAsyncRoutes(tmp.children, roles)
        // forCheck() 方法递归判断该节点下是否存在页面，不存在则隐藏
        // true：不存在，false：存在
        tmp.hidden = forCheck(tmp.children)
      }
      res.push(tmp)
    }
  })
  return res

}
//

function forCheck(routes) {
  // 设置默认为隐藏
  let isHidden = true
  // 判断是否存页面，不存在说明该节点下不存在页面
  if (routes.length > 0) {
    // 循环子目录，如果子目录中不存在需要权限页面
    // 说明子页面全是展开栏，隐藏
    for (const route of routes) {
      // 存在 permission 说明为页面，不存在说明为展开栏，将子页面列表继续递归
      if (route.meta && route.meta.permission_name) {
        isHidden = false
        return
      } else {
        isHidden = forCheck(route.children)

      }
    }
  }
  return isHidden
}
// const permission = {
//   state: {
//     routers: constantRoutes,
//     addRouters: []
//   },
//   mutations : {
//     SET_ROUTES: (state, routes) => {
//       state.addRoutes = routes
//       state.routes = constantRoutes.concat(routes)
//     }
//   },
//   actions : {
//     generateRoutes({ commit }, roles) {
//       return new Promise(resolve => {
//         const { roles } = data
//         let accessedRoutes
//         if (roles.includes('system')) {
//           accessedRoutes = asyncRoutes || []
//         } else {
//           accessedRoutes = filterAsyncRoutes(asyncRoutes  , roles)
//         }
//         commit('SET_ROUTES', accessedRoutes)
//         resolve(accessedRoutes)
//       })
//     }
//   }
// }
const state = {
  routes: constantRoutes,
  addRoutes: []
}

const mutations = {
  SET_ROUTES: (state, routes) => {
    state.addRoutes = routes
    state.routes = constantRoutes.concat(routes)
  }
}

const actions = {
  generateRoutes({ commit }, priv) {
    return new Promise(resolve => {
      let accessedRoutes
      if (priv.length === 0) {
        accessedRoutes = asyncRoutes || []
      } else {
        accessedRoutes = filterAsyncRoutes(asyncRoutes, priv)
      }
      commit('SET_ROUTES', accessedRoutes)
      resolve(accessedRoutes)
    })
  }
}

export default {
  namespaced: true,
  state,
  mutations,
  actions
}

{"remainingRequest":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vueProject\\admin\\vue-element-admin\\src\\views\\system-manager\\department.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vueProject\\admin\\vue-element-admin\\src\\views\\system-manager\\department.vue","mtime":1574217620160},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vueProject\\admin\\vue-element-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SystemManager from  '@/api/system-manager'\nimport { getToken} from '@/utils/auth'\nimport toJsonData from '@/api/jsonformdata'\nimport {constantRoutes,asyncRoutes} from '@/router'\nimport { deepClone } from '@/utils/index.js'\nimport path from 'path'\nimport {getRoles ,updateRole} from '@/api/role'\nconst defaultRole = {\n  routes: {}\n}\nexport default {\n  name: 'department',\n  data(){\n    return {\n      formInline: {\n        admin_name: '',\n        name: ''\n      },\n      activeIndex: '1',\n      token: getToken(),\n      adminId: '',\n      departmentName: [],\n      dialogFormVisible: false,\n      dialogAddFormVisible:false,\n      dialogPersonFormVisible: false,\n      dialogPermissionVisible:false,\n      checkStrictly: false,\n      formLabelWidth: '120px',\n      visible: false,\n      optionVisible:false,\n      adminVisible:false,\n      tableData: [{}],\n      top: 0,\n      left: 0,\n      selectedTag: {},\n      affixTags: [],\n      routes: [],\n      defaultProps: {\n        children: 'children',\n        label: 'title'\n      },\n      form: {\n        role_id: '',\n        admin_name: '',\n        password: '',\n        name: ''\n      },\n      personForm: {\n        role_id: '',\n        admin_name: '',\n        password: '',\n        name: ''\n      },\n      addForm: {\n        role_name: ''\n      },\n      roleForm:  Object.assign({}, defaultRole),\n      departmentId: ''\n    }\n  },\n  methods: {\n    onSubmit() {\n      const postData = toJsonData.JsonData(this.formInline)\n      SystemManager.searchPeople(postData, this.token).then(data => {\n        this.tableData = data.data;\n      })\n    },\n    async getRoutes() {\n      const routes = deepClone([...constantRoutes, ...asyncRoutes])\n      this.serviceRoutes = routes\n      this.routes = this.generateRoutes(routes)\n    },\n    async getRoles() {\n      this.dialogPermissionVisible = true\n      getRoles(this.departmentId ,this.token).then(data => {\n        const dataChecked = data.data;\n        this.$refs.tree.setCheckedKeys(dataChecked)\n      })\n    },\n    generateRoutes(routes, basePath = '/') {\n      const res = []\n      for (let route of routes) {\n        // skip some route\n        if (route.hidden) { continue }\n        const onlyOneShowingChild = this.onlyOneShowingChild(route.children, route)\n        if (route.children && onlyOneShowingChild && !route.alwaysShow) {\n          route = onlyOneShowingChild\n        }\n        const data = {\n          path: path.resolve(basePath, route.path),\n          title: route.meta && route.meta.title\n        }\n        // recursive child routes\n        if (route.children) {\n          data.children = this.generateRoutes(route.children, data.path)\n        }\n        res.push(data)\n      }\n      return res\n    },\n    onlyOneShowingChild(children = [], parent) {\n      let onlyOneChild = null\n      const showingChildren = children.filter(item => !item.hidden)\n      // When there is only one child route, the child route is displayed by default\n      if (showingChildren.length === 1) {\n        onlyOneChild = showingChildren[0]\n        onlyOneChild.path = path.resolve(parent.path, onlyOneChild.path)\n        return onlyOneChild\n      }\n      // Show parent if there are no child route to display\n      if (showingChildren.length === 0) {\n        onlyOneChild = { ... parent, path: '', noShowingChildren: true }\n        return onlyOneChild\n      }\n\n      return false\n    },\n    confirmRole() {\n      const checkedKeys = this.$refs.tree.getCheckedKeys()\n      const formData = new FormData()\n      formData.append('data[priv]', (checkedKeys).join())\n      updateRole(formData,this.departmentId, this.token).then(data => {\n        this.$message({\n          message:data.data.log,\n          type: 'success'\n        })\n        this.closeDialog();\n        // this.getRoleIndex();\n      })\n    },\n    generateTree(routes, basePath = '/', checkedKeys) {\n      const res = []\n\n      for (const route of routes) {\n        const routePath = path.resolve(basePath, route.path)\n\n        // recursive child routes\n        if (route.children) {\n          route.children = this.generateTree(route.children, routePath, checkedKeys)\n        }\n\n        if (checkedKeys.includes(routePath) || (route.children && route.children.length >= 1)) {\n          res.push(route)\n        }\n      }\n      return res\n    },\n    handleSelect(key, keyPath) {\n      if(key > 1){\n      this.departmentId = this.departmentName[key-2].role_id;\n    }else{\n      this.departmentId = ''\n    }\n      // this.departmentId\n      SystemManager.getAdminIndex(this.departmentId , this.token).then(data => {\n          this.tableData = data.data;\n          console.log(this.tableData)\n      })\n    },\n    getRoleIndex() {\n      this.departmentName =[];\n          SystemManager.getRoleIndex(this.token).then(data => {\n            const arrData = Object.entries(data.data)\n            arrData.forEach(res => {\n              this.departmentName.push({\n                'role_id': res[1].role_id,\n                'role_name':res[1].role_name\n              })\n            })\n          }).catch(error => {\n            console.log(error)\n      })\n    },\n    createRole() {\n      const postData = toJsonData.JsonData(this.addForm)\n      SystemManager.createRole(postData, this.token).then(data => {\n        this.$message({\n          message:data.data.log,\n          type: 'success'\n        })\n        this.closeDialog();\n        this.getRoleIndex();\n      }).catch(error => {\n        console.log(error)\n      })\n    },\n    createPerson() {\n      const postData = toJsonData.JsonData(this.form)\n      SystemManager.createPerson(postData, this.token).then(data=> {\n        this.$message({\n          message:data.data.log,\n          type: 'success'\n        })\n        this.handleSelect();\n        this.closeDialog();\n\n      }).catch(error => {\n        console.log(error)\n      })\n      this.form= {}\n    },\n    modifyPerson() {\n      const postData = toJsonData.JsonData(this.personForm)\n      SystemManager.modifyPerson(postData, this.token, this.adminId).then(data => {\n        this.$message({\n          message:data.data.log,\n          type: 'success'\n        })\n        this.handleSelect(parseInt(this.departmentId) +1);\n        this.closeDialog();\n      }).catch(error => {\n        console.log(error)\n      })\n    },\n    deleteDepartment() {\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        SystemManager.deleteRole(this.departmentId, this.token).then(data => {\n          this.getRoleIndex();\n        })\n        // this.$message({\n        //   type: 'success',\n        //   message: '删除成功!'\n        // });\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    deletePerson(){\n      this.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        SystemManager.deletePerson(this.adminId, this.token).then(data => {\n          this.$message({\n            message:data.data.log,\n            type: 'success'\n          })\n          this.handleSelect(parseInt(this.departmentId) +1);\n          this.closeDialog();\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    openAddMenu(tag,e) {\n      this.activeIndex = tag.toString()\n      // this.departmentId = departmentId\n      this.handleSelect(parseInt(this.activeIndex));\n      this.publicMenu(e);\n      this.visible = true\n      this.optionVisible = false\n      // this.selectedTag = tag\n    },\n    openOptionMenu(tag,departmentId, e) {\n      this.activeIndex = tag.toString()\n      this.departmentId = departmentId\n      // console.log(departmentId)\n      this.publicMenu(e);\n      this.handleSelect(parseInt(this.departmentId) +1);\n      this.optionVisible = true\n      this.visible = false\n    },\n    publicMenu(e){\n      const menuMinWidth = 105\n      const offsetLeft = this.$el.getBoundingClientRect().left // container margin left\n      const offsetWidth = this.$el.offsetWidth // container width\n      const maxLeft = offsetWidth - menuMinWidth // left boundary\n      const left = e.clientX - offsetLeft + 15 // 15: margin right\n      if (left > maxLeft) {\n        this.left = maxLeft\n      } else {\n        this.left = left\n      }\n      this.top = e.clientY - 80\n    },\n    rightClick(row, column, e) {\n      e.preventDefault();\n      this.personForm = {\n        role_id: row.role_id,\n        admin_name: row.admin_name,\n        password: '',\n        name: row.name\n      }\n    this.adminId = row.admin_id\n      this.publicMenu(e);\n      this.adminVisible = true\n    },\n    closeMenu() {\n      this.visible = false\n      this.optionVisible = false\n      this.adminVisible = false\n    },\n    closeDialog() {\n      this.dialogAddFormVisible = false;\n      this.dialogFormVisible = false;\n      this.dialogPersonFormVisible = false;\n      this.dialogPermissionVisible = false;\n    }\n  },\n  computed: {\n    routesData() {\n      return this.routes\n    }\n  },\n  created(){\n    this.getRoleIndex();\n    this.handleSelect();\n    this.getRoutes();\n  },\n  watch: {\n    visible(value) {\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu)\n      } else {\n        document.body.removeEventListener('click', this.closeMenu)\n      }\n    },\n    optionVisible(value){\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu)\n      } else {\n        document.body.removeEventListener('click', this.closeMenu)\n      }\n    },\n    adminVisible(value){\n      if (value) {\n        document.body.addEventListener('click', this.closeMenu)\n      } else {\n        document.body.removeEventListener('click', this.closeMenu)\n      }\n    }\n  }\n}\n",null]}